{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\n\nfunction BlogPostPage(props) {\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"h1\", {\n      children: props.blog.title\n    }), /*#__PURE__*/_jsx(\"section\", {\n      dangerouslySetInnerHTML: {\n        __html: props.blog.content\n      }\n    })]\n  });\n} // pass props to BlogPostPage component\n\n\nexport async function getStaticProps(context) {\n  const fs = require(\"fs\");\n\n  const html = require(\"remark-html\");\n\n  const highlight = require(\"remark-highlight.js\");\n\n  const unified = require(\"unified\");\n\n  const markdown = require(\"remark-parse\");\n\n  const matter = require(\"gray-matter\");\n\n  const slug = context.params.slug; // get slug from params\n\n  const path = `${process.cwd()}/_posts/${slug}.md`; // read file content and store into rawContent variable\n\n  const rawContent = fs.readFileSync(path, {\n    encoding: \"utf-8\"\n  });\n  const {\n    data,\n    content\n  } = matter(rawContent); // pass rawContent to gray-matter to get data and content\n\n  const result = await unified().use(markdown).use(highlight) // highlight code block\n  .use(html).process(content); // pass content to process\n\n  return {\n    props: {\n      blog: _objectSpread(_objectSpread({}, data), {}, {\n        content: result.toString()\n      })\n    }\n  };\n} // generate HTML paths at build time\n\nexport async function getStaticPaths(context) {\n  const fs = require(\"fs\");\n\n  const path = `${process.cwd()}/_posts`;\n  const files = fs.readdirSync(path, \"utf-8\");\n  const markdownFileNames = files.filter(fn => fn.endsWith(\".md\")).map(fn => fn.replace(\".md\", \"\"));\n  return {\n    paths: markdownFileNames.map(fileName => {\n      return {\n        params: {\n          slug: fileName\n        }\n      };\n    }),\n    fallback: false\n  };\n}\nexport default BlogPostPage;","map":null,"metadata":{},"sourceType":"module"}